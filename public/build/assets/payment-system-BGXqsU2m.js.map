{"version":3,"file":"payment-system-BGXqsU2m.js","sources":["../../../resources/js/checkout/checkout.js"],"sourcesContent":["// resources/js/checkout/checkout.js\r\n// This file handles all client-side logic for the checkout process,\r\n// including form validation, address selection, progress bar updates,\r\n// API calls with retry mechanisms, and local storage for draft orders.\r\n\r\n// Import necessary global functions (assuming they are defined in app.js or core/utils.js)\r\n// If debounce is moved to core/utils.js, import it like this:\r\n// import { debounce } from '../core/utils.js';\r\n\r\n// Define validation rules using regular expressions\r\nconst validationRules = {\r\n    phone_number: /^09[0-9]{9}$/, // Validates Iranian mobile numbers starting with 09 and 9 digits after\r\n    postal_code: /^[0-9]{10}$/, // Validates 10-digit postal codes\r\n    first_name: /^[\\u0600-\\u06FF\\s]{2,50}$/, // Validates Persian characters, 2-50 length for names\r\n    last_name: /^[\\u0600-\\u06FF\\s]{2,50}$/, // Validates Persian characters, 2-50 length for names\r\n    address: /^.{10,200}$/ // Minimum 10 characters, max 200 for address\r\n};\r\n\r\n// Define custom error messages for each field\r\nconst errorMessages = {\r\n    first_name: {\r\n        required: 'لطفاً نام کوچک خود را وارد کنید.', // Please enter your first name.\r\n        pattern: 'نام کوچک باید شامل حروف فارسی باشد و حداقل ۲ کاراکتر باشد.' // First name must contain Persian letters and be at least 2 characters long.\r\n    },\r\n    last_name: {\r\n        required: 'لطفاً نام خانوادگی خود را وارد کنید.', // Please enter your last name.\r\n        pattern: 'نام خانوادگی باید شامل حروف فارسی باشد و حداقل ۲ کاراکتر باشد.' // Last name must contain Persian letters and be at least 2 characters long.\r\n    },\r\n    phone_number: {\r\n        required: 'لطفاً شماره تلفن خود را وارد کنید.', // Please enter your phone number.\r\n        pattern: 'فرمت شماره تلفن صحیح نیست. مثال: 09123456789' // Phone number format is incorrect. Example: 09123456789\r\n    },\r\n    address: {\r\n        required: 'لطفاً آدرس کامل خود را وارد کنید.', // Please enter your full address.\r\n        pattern: 'آدرس باید حداقل ۱۰ کاراکتر باشد.' // Address must be at least 10 characters long.\r\n    },\r\n    province: {\r\n        required: 'لطفاً استان خود را وارد کنید.' // Please enter your province.\r\n    },\r\n    city: {\r\n        required: 'لطفاً شهر خود را وارد کنید.' // Please enter your city.\r\n    },\r\n    postal_code: {\r\n        required: 'لطفاً کد پستی خود را وارد کنید.', // Please enter your postal code.\r\n        pattern: 'کد پستی باید ۱۰ رقمی باشد.' // Postal code must be 10 digits.\r\n    },\r\n    shipping_method: {\r\n        required: 'لطفاً روش ارسال را انتخاب کنید.' // Please select a shipping method.\r\n    },\r\n    payment_method: {\r\n        required: 'لطفاً روش پرداخت را انتخاب کنید.' // Please select a payment method.\r\n    },\r\n    terms_agree: {\r\n        required: 'برای ثبت سفارش، باید قوانین و مقررات را بپذیرید.' // To place an order, you must accept the terms and conditions.\r\n    }\r\n};\r\n\r\n/**\r\n * Helper function for debouncing.\r\n * Prevents a function from being called too frequently.\r\n * @param {Function} func - The function to debounce.\r\n * @param {number} wait - The number of milliseconds to wait.\r\n * @returns {Function} The debounced function.\r\n */\r\n// NOTE: This debounce function should ideally be moved to resources/js/core/utils.js\r\n// For now, it remains here. If you move it, remove this definition and import it.\r\nconst debounce = (func, wait) => {\r\n    let timeout;\r\n    return function executedFunction(...args) {\r\n        const later = () => {\r\n            clearTimeout(timeout);\r\n            func(...args);\r\n        };\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(later, wait);\r\n    };\r\n};\r\n\r\n/**\r\n * Displays a field-specific error message.\r\n * Also updates the live region for accessibility.\r\n * @param {HTMLElement} inputElement - The input element.\r\n * @param {string} message - The error message.\r\n */\r\nfunction showFieldError(inputElement, message) {\r\n    const errorDivId = inputElement.id + '-error';\r\n    const errorDiv = document.getElementById(errorDivId);\r\n    if (errorDiv) {\r\n        errorDiv.textContent = message;\r\n        errorDiv.classList.remove('hidden');\r\n    }\r\n    inputElement.classList.add('border-red-500');\r\n    inputElement.classList.remove('focus:ring-green-700', 'focus:border-green-700');\r\n\r\n    // Update live region for accessibility\r\n    const formErrorsLiveRegion = document.getElementById('form-errors-live-region');\r\n    if (formErrorsLiveRegion) {\r\n        formErrorsLiveRegion.textContent = message;\r\n    }\r\n}\r\n\r\n/**\r\n * Clears a field-specific error message.\r\n * @param {HTMLElement} inputElement - The input element.\r\n */\r\nfunction clearFieldError(inputElement) {\r\n    const errorDivId = inputElement.id + '-error';\r\n    const errorDiv = document.getElementById(errorDivId);\r\n    if (errorDiv) {\r\n        errorDiv.textContent = '';\r\n        errorDiv.classList.add('hidden');\r\n    }\r\n    inputElement.classList.remove('border-red-500');\r\n    inputElement.classList.add('focus:ring-green-700', 'focus:border-green-700');\r\n\r\n    // Clear live region if this was the last error (simple approach)\r\n    const formErrorsLiveRegion = document.getElementById('form-errors-live-region');\r\n    if (formErrorsLiveRegion && formErrorsLiveRegion.textContent === inputElement.getAttribute('aria-describedby')) {\r\n        formErrorsLiveRegion.textContent = '';\r\n    }\r\n}\r\n\r\n/**\r\n * Validates a single field against a given rule.\r\n * @param {string} fieldId - The ID of the field.\r\n * @param {string} value - The value of the field.\r\n * @param {RegExp|null} rule - The regex rule to apply, or null if not applicable.\r\n * @param {HTMLElement} inputElement - The DOM element of the field.\r\n * @returns {boolean} True if validation passes, false otherwise.\r\n */\r\nfunction validateField(fieldId, value, rule, inputElement) {\r\n    if (rule && !rule.test(value)) {\r\n        showFieldError(inputElement, errorMessages[fieldId].pattern);\r\n        return false;\r\n    }\r\n    clearFieldError(inputElement);\r\n    return true;\r\n}\r\n\r\n/**\r\n * Updates the progress bar.\r\n * @param {number} step - Current step.\r\n * @param {number} totalSteps - Total number of steps.\r\n */\r\nfunction showProgress(step, totalSteps) {\r\n    const progressBar = document.getElementById('progress-bar');\r\n    if (progressBar) {\r\n        const percentage = (step / totalSteps) * 100;\r\n        progressBar.style.width = `${percentage}%`;\r\n    }\r\n}\r\n\r\n/**\r\n * Helper function to validate all form fields on submit.\r\n * @param {Object} data - Object containing form data.\r\n * @returns {boolean} True if all validations pass, false otherwise.\r\n */\r\nfunction validateFormFields(data) {\r\n    // Clear previous errors\r\n    document.querySelectorAll('.text-red-500.text-sm.mt-1').forEach(el => {\r\n        el.textContent = '';\r\n        el.classList.add('hidden');\r\n    });\r\n    document.querySelectorAll('.form-input, .form-radio, .form-checkbox').forEach(el => {\r\n        el.classList.remove('border-red-500');\r\n        el.classList.add('focus:ring-green-700', 'focus:border-green-700');\r\n    });\r\n\r\n    let isValid = true;\r\n    let firstInvalidElement = null;\r\n\r\n    // Check if a specific address is selected or if new address fields are filled\r\n    const selectedAddressId = document.querySelector('input[name=\"selected_address_id\"]:checked')?.value;\r\n\r\n    const requiredAddressFields = [\r\n        { id: 'first_name', rule: validationRules.first_name },\r\n        { id: 'last_name', rule: validationRules.last_name },\r\n        { id: 'phone_number', rule: validationRules.phone_number },\r\n        { id: 'address', rule: validationRules.address },\r\n        { id: 'province', rule: null },\r\n        { id: 'city', rule: null },\r\n        { id: 'postal_code', rule: validationRules.postal_code }\r\n    ];\r\n\r\n    // Only validate address fields if \"new address\" is selected or no addresses exist\r\n    if (selectedAddressId === 'new' || document.querySelectorAll('input[name=\"selected_address_id\"]').length === 0) {\r\n        for (const field of requiredAddressFields) {\r\n            const inputElement = document.getElementById(field.id);\r\n            if (!inputElement || !inputElement.value.trim()) {\r\n                showFieldError(inputElement, errorMessages[field.id].required);\r\n                isValid = false;\r\n                if (!firstInvalidElement) firstInvalidElement = inputElement;\r\n            } else if (field.rule && !validateField(field.id, inputElement.value.trim(), field.rule, inputElement)) {\r\n                isValid = false;\r\n                if (!firstInvalidElement) firstInvalidElement = inputElement;\r\n            }\r\n        }\r\n    } else {\r\n        if (!selectedAddressId) {\r\n            window.showMessage('لطفاً یک آدرس را انتخاب کنید یا آدرس جدیدی وارد کنید.', 'error');\r\n            isValid = false;\r\n            const addressRadios = document.querySelectorAll('input[name=\"selected_address_id\"]');\r\n            if (addressRadios.length > 0) addressRadios[0].focus();\r\n        }\r\n    }\r\n\r\n    // Specific validation for radio buttons (shipping and payment)\r\n    const shippingMethod = document.querySelector('input[name=\"shipping_method\"]:checked');\r\n    if (!shippingMethod) {\r\n        const shippingRadioGroup = document.getElementById('shipping_post');\r\n        if (shippingRadioGroup) {\r\n            showFieldError(shippingRadioGroup, errorMessages.shipping_method.required);\r\n            isValid = false;\r\n            if (!firstInvalidElement) firstInvalidElement = shippingRadioGroup;\r\n        } else {\r\n            window.showMessage(errorMessages.shipping_method.required, 'error');\r\n            isValid = false;\r\n        }\r\n    }\r\n\r\n    const paymentMethod = document.querySelector('input[name=\"payment_method\"]:checked');\r\n    if (!paymentMethod) {\r\n        const paymentRadioGroup = document.getElementById('payment_online');\r\n        if (paymentRadioGroup) {\r\n            showFieldError(paymentRadioGroup, errorMessages.payment_method.required);\r\n            isValid = false;\r\n            if (!firstInvalidElement) firstInvalidElement = paymentRadioGroup;\r\n        } else {\r\n            window.showMessage(errorMessages.payment_method.required, 'error');\r\n            isValid = false;\r\n        }\r\n    }\r\n\r\n    // Validate terms and conditions checkbox\r\n    const termsAgreeCheckbox = document.getElementById('terms_agree');\r\n    if (termsAgreeCheckbox && !termsAgreeCheckbox.checked) {\r\n        showFieldError(termsAgreeCheckbox, errorMessages.terms_agree.required);\r\n        isValid = false;\r\n        if (!firstInvalidElement) firstInvalidElement = termsAgreeCheckbox;\r\n    } else if (!termsAgreeCheckbox) {\r\n        console.error(\"Terms and conditions checkbox (terms_agree) not found.\");\r\n        window.showMessage(errorMessages.terms_agree.required, 'error');\r\n        isValid = false;\r\n    }\r\n\r\n    if (!isValid && firstInvalidElement) {\r\n        firstInvalidElement.focus();\r\n    }\r\n\r\n    const formErrorsLiveRegion = document.getElementById('form-errors-live-region');\r\n    if (formErrorsLiveRegion) {\r\n        if (isValid) {\r\n            formErrorsLiveRegion.textContent = '';\r\n        } else {\r\n            formErrorsLiveRegion.textContent = 'لطفاً تمام فیلدهای الزامی را به درستی پر کنید.';\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n}\r\n\r\n/**\r\n * Handles server-side validation errors (status 422).\r\n * @param {Object} errors - The error object from the server response.\r\n */\r\nfunction handleServerValidationError(errors) {\r\n    let errorMessage = 'لطفاً اطلاعات ورودی را بررسی کنید: <br>';\r\n    for (const field in errors) {\r\n        errorMessage += `- ${errors[field].join(', ')}<br>`;\r\n        const inputElement = document.getElementById(field);\r\n        if (inputElement) {\r\n            showFieldError(inputElement, errors[field].join(', '));\r\n        }\r\n    }\r\n    window.showMessage(errorMessage, 'error', 5000);\r\n    console.error('Order placement error (server validation failed):', { errors: errors });\r\n}\r\n\r\n/**\r\n * Handles general client-side errors (4xx other than 422).\r\n * @param {Object} result - The response body from the server.\r\n * @param {number} status - The HTTP status code.\r\n */\r\nfunction handleClientError(result, status) {\r\n    window.showMessage(result.message || 'خطا در ثبت سفارش. لطفاً دوباره تلاش کنید.', 'error');\r\n    console.error('Order placement error (client error):', { status: status, responseBody: result });\r\n}\r\n\r\n/**\r\n * Handles network errors or retryable server errors (5xx).\r\n * @param {Object} result - The response body from the server.\r\n * @param {number} status - The HTTP status code.\r\n * @param {number} attempt - Current retry attempt number.\r\n * @param {number} maxRetries - Maximum retry attempts.\r\n */\r\nfunction handleRetryableError(result, status, attempt, maxRetries) {\r\n    console.warn(`Attempt ${attempt} failed. Retrying...`, { status: status, responseBody: result });\r\n    if (attempt < maxRetries) {\r\n        window.showMessage('خطا در ثبت سفارش. تلاش مجدد...', 'info', 2000);\r\n    } else {\r\n        window.showMessage(result.message || 'خطا در ثبت سفارش. لطفاً دوباره تلاش کنید.', 'error');\r\n        console.error('Order placement error (all retries failed):', { status: status, responseBody: result });\r\n    }\r\n}\r\n\r\n/**\r\n * Attempts to place an order with a retry mechanism and timeout.\r\n * @param {Object} data - The order data.\r\n * @param {number} maxRetries - Maximum number of retries.\r\n * @param {number} delay - Initial delay between retries in milliseconds.\r\n * @returns {Promise<Object>} The response JSON if successful.\r\n * @throws {Error} If all retries fail or validation fails.\r\n */\r\nasync function placeOrderWithRetry(data, maxRetries = 3, delay = 1000) {\r\n    for (let i = 0; i < maxRetries; i++) {\r\n        const controller = new AbortController();\r\n        const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout\r\n\r\n        try {\r\n            showProgress(i + 1, maxRetries + 1); // +1 for the final success step\r\n            const response = await fetch('/order/place', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'X-CSRF-TOKEN': getCsrfToken()\r\n                },\r\n                body: JSON.stringify(data),\r\n                signal: controller.signal // Add timeout signal\r\n            });\r\n\r\n            clearTimeout(timeoutId); // Clear timeout if request completes in time\r\n\r\n            const result = await response.json();\r\n\r\n            if (response.ok) {\r\n                showProgress(maxRetries + 1, maxRetries + 1); // 100% progress on success\r\n                return result;\r\n            }\r\n\r\n            // Handle specific non-retryable errors (e.g., validation errors)\r\n            if (response.status === 422) {\r\n                handleServerValidationError(result.errors);\r\n                throw new Error('Validation failed on server'); // Throw to exit retry loop\r\n            } else if (response.status >= 400 && response.status < 500) {\r\n                handleClientError(result, response.status);\r\n                throw new Error('Client error, not retrying');\r\n            } else {\r\n                handleRetryableError(result, response.status, i + 1, maxRetries);\r\n                if (i < maxRetries - 1) {\r\n                    await new Promise(resolve => setTimeout(resolve, delay * (i + 1))); // Exponential backoff\r\n                } else {\r\n                    throw new Error('All retries failed');\r\n                }\r\n            }\r\n        } catch (error) {\r\n            clearTimeout(timeoutId); // Ensure timeout is cleared even on network errors\r\n            if (error.name === 'AbortError') {\r\n                window.showMessage('درخواست بیش از حد طولانی شد. لطفاً دوباره تلاش کنید.', 'error'); // Request took too long. Please try again.\r\n                console.error('Request timed out:', error);\r\n                throw error; // Re-throw to exit retry loop\r\n            }\r\n            // Network errors or unexpected issues\r\n            console.error(`Attempt ${i + 1} caught an error:`, { message: error.message, stack: error.stack });\r\n            if (i < maxRetries - 1) {\r\n                window.showMessage('خطا در ارتباط با سرور. تلاش مجدد...', 'info', 2000); // Error connecting to server. Retrying...\r\n                await new Promise(resolve => setTimeout(resolve, delay * (i + 1)));\r\n            } else {\r\n                window.showMessage('خطا در ارتباط با سرور. لطفاً اتصال اینترنت خود را بررسی کنید.', 'error'); // Error connecting to server. Please check your internet connection.\r\n                throw error; // Re-throw the error after last retry fails\r\n            }\r\n        }\r\n    }\r\n    throw new Error('Unexpected error in placeOrderWithRetry'); // Should not be reached\r\n}\r\n\r\n// Get CSRF Token from meta tag\r\nfunction getCsrfToken() {\r\n    const csrfMeta = document.querySelector('meta[name=\"csrf-token\"]');\r\n    return csrfMeta ? csrfMeta.getAttribute('content') : '';\r\n}\r\n\r\n/**\r\n * Saves form data to local storage as a draft.\r\n */\r\nfunction saveDraft() {\r\n    const placeOrderForm = document.getElementById('place-order-form');\r\n    if (!placeOrderForm) return; // Ensure form exists before trying to save\r\n\r\n    const formData = new FormData(placeOrderForm);\r\n    const data = Object.fromEntries(formData.entries());\r\n    try {\r\n        localStorage.setItem('orderDraft', JSON.stringify(data));\r\n        // console.log('Draft saved.'); // For debugging\r\n    } catch (e) {\r\n        console.error('Error saving draft to local storage:', e);\r\n    }\r\n}\r\n\r\n/**\r\n * Loads form data from local storage draft.\r\n */\r\nfunction loadDraft() {\r\n    const placeOrderForm = document.getElementById('place-order-form');\r\n    if (!placeOrderForm) return; // Ensure form exists before trying to load\r\n\r\n    try {\r\n        const draft = localStorage.getItem('orderDraft');\r\n        if (draft) {\r\n            const data = JSON.parse(draft);\r\n            Object.entries(data).forEach(([key, value]) => {\r\n                const field = placeOrderForm.querySelector(`[name=\"${key}\"]`);\r\n                if (field) {\r\n                    if (field.type === 'radio' || field.type === 'checkbox') {\r\n                        if (field.value === value) {\r\n                            field.checked = true;\r\n                        }\r\n                    } else {\r\n                        field.value = value;\r\n                    }\r\n                }\r\n            });\r\n            // console.log('Draft loaded.'); // For debugging\r\n        }\r\n    } catch (e) {\r\n        console.error('Error loading draft from local storage:', e);\r\n        localStorage.removeItem('orderDraft'); // Clear corrupted draft\r\n    }\r\n}\r\n\r\n// --- Address Selection Logic ---\r\n\r\n// Define addressFields object with null initial values\r\nconst addressFields = {\r\n    first_name: null,\r\n    last_name: null,\r\n    phone_number: null,\r\n    address: null,\r\n    province: null,\r\n    city: null,\r\n    postal_code: null\r\n};\r\n\r\n// Populate addressFields with actual DOM elements after DOMContentLoaded\r\nfunction initializeAddressFields() {\r\n    addressFields.first_name = document.getElementById('first_name');\r\n    addressFields.last_name = document.getElementById('last_name');\r\n    addressFields.phone_number = document.getElementById('phone_number');\r\n    addressFields.address = document.getElementById('address');\r\n    addressFields.province = document.getElementById('province');\r\n    addressFields.city = document.getElementById('city');\r\n    addressFields.postal_code = document.getElementById('postal_code');\r\n}\r\n\r\n\r\n/**\r\n * Populates address fields with data from a given address object.\r\n * @param {Object} address - The address object containing user details.\r\n */\r\nfunction populateAddressFields(address) {\r\n    // Check if the element exists before trying to set its value\r\n    if (addressFields.first_name) addressFields.first_name.value = address.first_name || '';\r\n    if (addressFields.last_name) addressFields.last_name.value = address.last_name || '';\r\n    if (addressFields.phone_number) addressFields.phone_number.value = address.phone_number || '';\r\n    if (addressFields.address) addressFields.address.value = address.address || '';\r\n    if (addressFields.province) addressFields.province.value = address.province || '';\r\n    if (addressFields.city) addressFields.city.value = address.city || '';\r\n    if (addressFields.postal_code) addressFields.postal_code.value = address.postal_code || '';\r\n    // Clear any validation errors when populating fields\r\n    Object.keys(addressFields).forEach(fieldId => {\r\n        const inputElement = addressFields[fieldId];\r\n        if (inputElement) clearFieldError(inputElement); // Only clear if element exists\r\n    });\r\n}\r\n\r\n/**\r\n * Clears all address input fields.\r\n */\r\nfunction clearAddressFields() {\r\n    if (addressFields.first_name) addressFields.first_name.value = '';\r\n    if (addressFields.last_name) addressFields.last_name.value = '';\r\n    if (addressFields.phone_number) addressFields.phone_number.value = '';\r\n    if (addressFields.address) addressFields.address.value = '';\r\n    if (addressFields.province) addressFields.province.value = '';\r\n    if (addressFields.city) addressFields.city.value = '';\r\n    if (addressFields.postal_code) addressFields.postal_code.value = '';\r\n    // Clear any validation errors\r\n    Object.keys(addressFields).forEach(fieldId => {\r\n        const inputElement = addressFields[fieldId];\r\n        if (inputElement) clearFieldError(inputElement); // Only clear if element exists\r\n    });\r\n}\r\n\r\n/**\r\n * Function to format numbers with commas\r\n * @param {number} num - The number to format.\r\n * @returns {string} The formatted number string.\r\n */\r\nfunction formatNumber(num) {\r\n    return new Intl.NumberFormat('fa-IR').format(num);\r\n}\r\n\r\n/**\r\n * Updates the total cart price displayed in the summary.\r\n */\r\nfunction updateCartTotal() {\r\n    const cartItemsSummary = document.getElementById('cart-items-summary');\r\n    const cartTotalPriceElement = document.getElementById('cart-total-price');\r\n\r\n    if (!cartItemsSummary || !cartTotalPriceElement) {\r\n        console.warn('Cart summary elements not found for updateCartTotal.');\r\n        return;\r\n    }\r\n\r\n    let total = 0;\r\n    document.querySelectorAll('#cart-items-summary > div').forEach(itemElement => {\r\n        const subtotal = parseFloat(itemElement.querySelector('.item-subtotal').dataset.subtotal);\r\n        total += subtotal;\r\n    });\r\n    cartTotalPriceElement.textContent = `${formatNumber(total)} تومان`;\r\n    cartTotalPriceElement.dataset.totalPrice = total; // Update data attribute\r\n}\r\n\r\n/**\r\n * Sets the loading state for the form and button.\r\n * @param {boolean} isLoading - True to set loading state, false to reset.\r\n */\r\nfunction setLoadingState(isLoading) {\r\n    const placeOrderForm = document.getElementById('place-order-form');\r\n    const placeOrderBtn = document.getElementById('place-order-btn');\r\n\r\n    if (placeOrderBtn) {\r\n        if (isLoading) {\r\n            placeOrderBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin ml-2\"></i> در حال ثبت سفارش...'; // Placing order...\r\n            placeOrderBtn.disabled = true;\r\n            placeOrderBtn.classList.add('opacity-70', 'cursor-not-allowed');\r\n        } else {\r\n            placeOrderBtn.innerHTML = 'ثبت سفارش نهایی'; // Finalize Order\r\n            placeOrderBtn.disabled = false;\r\n            placeOrderBtn.classList.remove('opacity-70', 'cursor-not-allowed');\r\n        }\r\n    }\r\n    if (placeOrderForm) {\r\n        // Disable all form inputs to prevent interaction during submission\r\n        const formElements = placeOrderForm.querySelectorAll('input, select, textarea, button:not(#place-order-btn)');\r\n        formElements.forEach(el => {\r\n            if (el !== placeOrderBtn) { // Don't disable the main button twice\r\n                el.disabled = isLoading;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Initializes all client-side logic for the checkout page.\r\n * This function will be called by app.js when the checkout module is dynamically loaded.\r\n */\r\nexport function initCheckout() {\r\n    console.log('Checkout module initializing...');\r\n\r\n    // Cache DOM elements for better performance\r\n    const placeOrderForm = document.getElementById('place-order-form');\r\n    const placeOrderBtn = document.getElementById('place-order-btn');\r\n    const progressBar = document.getElementById('progress-bar');\r\n    const formErrorsLiveRegion = document.getElementById('form-errors-live-region'); // Live region for accessibility\r\n\r\n    // Elements for quantity control in cart summary\r\n    const cartItemsSummary = document.getElementById('cart-items-summary');\r\n    const cartTotalPriceElement = document.getElementById('cart-total-price');\r\n\r\n    // Retrieve data passed from Blade template via data attributes\r\n    const addressesData = placeOrderForm ? JSON.parse(placeOrderForm.dataset.addresses || '[]') : [];\r\n    const defaultAddressData = placeOrderForm ? JSON.parse(placeOrderForm.dataset.defaultAddress || 'null') : null;\r\n\r\n    // Setup real-time validation for relevant input fields using event delegation\r\n    if (placeOrderForm) {\r\n        placeOrderForm.addEventListener('input', debounce((e) => {\r\n            const target = e.target;\r\n            const fieldId = target.id;\r\n            const value = target.value.trim();\r\n\r\n            if (validationRules[fieldId]) {\r\n                validateField(fieldId, value, validationRules[fieldId], target);\r\n            }\r\n        }, 500)); // 500ms debounce\r\n    }\r\n\r\n    // --- Address Selection Logic ---\r\n    const addressRadiosContainer = document.getElementById('address-selection-radios');\r\n    if (addressRadiosContainer) {\r\n        addressRadiosContainer.addEventListener('change', function(event) {\r\n            if (event.target.name === 'selected_address_id') {\r\n                const selectedValue = event.target.value;\r\n                if (selectedValue === 'new') {\r\n                    clearAddressFields();\r\n                } else {\r\n                    const selectedAddress = addressesData.find(addr => addr.id == selectedValue);\r\n                    if (selectedAddress) {\r\n                        populateAddressFields(selectedAddress);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // Initialize address fields and then populate if default address exists\r\n    initializeAddressFields(); // Call this after DOMContentLoaded\r\n    if (defaultAddressData) {\r\n        populateAddressFields(defaultAddressData);\r\n        // Ensure the correct radio button is checked if a default address is loaded\r\n        const defaultRadio = document.getElementById(`address_${defaultAddressData.id}`);\r\n        if (defaultRadio) {\r\n            defaultRadio.checked = true;\r\n        }\r\n    } else {\r\n        // If no default address or no addresses at all, ensure \"new address\" is selected and fields are clear\r\n        const newAddressRadio = document.getElementById('address_new');\r\n        if (newAddressRadio) {\r\n            newAddressRadio.checked = true;\r\n        }\r\n        clearAddressFields();\r\n    }\r\n    // --- End Address Selection Logic ---\r\n\r\n    // Initial load of draft on module initialization\r\n    loadDraft();\r\n\r\n    // Auto-save every 30 seconds\r\n    setInterval(saveDraft, 30000);\r\n\r\n    // 1. Add confirmation before leaving the page if there's unsaved data\r\n    window.addEventListener('beforeunload', function(e) {\r\n        const hasUnsavedData = localStorage.getItem('orderDraft');\r\n        if (hasUnsavedData) {\r\n            e.preventDefault();\r\n            e.returnValue = 'تغییرات شما ذخیره نشده است. مطمئن هستید که می‌خواهید صفحه را ترک کنید؟';\r\n        }\r\n    });\r\n\r\n    // 3. Add form timeout\r\n    const FORM_TIMEOUT = 30 * 60 * 1000; // 30 minutes in milliseconds\r\n    let formTimeoutId = null;\r\n\r\n    /**\r\n     * Starts or resets the form timeout.\r\n     * If the timeout expires, the form will be disabled.\r\n     */\r\n    function startFormTimeout() {\r\n        if (formTimeoutId) clearTimeout(formTimeoutId); // Clear any existing timeout\r\n        formTimeoutId = setTimeout(() => {\r\n            window.showMessage('جلسه شما منقضی شده است. لطفاً صفحه را بازخوانی کنید تا اطلاعات به روز شوند.', 'warning', 7000);\r\n            if (placeOrderForm) {\r\n                placeOrderForm.classList.add('pointer-events-none', 'opacity-70');\r\n            }\r\n            if (placeOrderBtn) {\r\n                placeOrderBtn.disabled = true;\r\n            }\r\n        }, FORM_TIMEOUT);\r\n    }\r\n\r\n    // Start timeout on initial load and reset on user interaction\r\n    startFormTimeout();\r\n    if (placeOrderForm) {\r\n        placeOrderForm.addEventListener('input', startFormTimeout);\r\n        placeOrderForm.addEventListener('change', startFormTimeout);\r\n\r\n        placeOrderForm.addEventListener('submit', async function(event) {\r\n            event.preventDefault();\r\n\r\n            if (!navigator.onLine) {\r\n                window.showMessage('اتصال اینترنت برقرار نیست. لطفاً اتصال خود را بررسی کنید و دوباره تلاش کنید.', 'error');\r\n                return;\r\n            }\r\n\r\n            const formData = new FormData(placeOrderForm);\r\n            const data = Object.fromEntries(formData.entries());\r\n\r\n            if (!validateFormFields(data)) {\r\n                showProgress(0, 1);\r\n                return;\r\n            }\r\n\r\n            setLoadingState(true);\r\n            showProgress(0, 4);\r\n\r\n            try {\r\n                const result = await placeOrderWithRetry(data);\r\n\r\n                window.showMessage(result.message, 'success');\r\n                localStorage.removeItem('orderDraft');\r\n                if (result.orderId) {\r\n                    if (formTimeoutId) clearTimeout(formTimeoutId);\r\n                    setTimeout(() => {\r\n                        window.location.href = `/order/confirmation/${result.orderId}`;\r\n                    }, 1500);\r\n                } else {\r\n                    console.warn('Order ID not returned from server. Cart might need manual clearing.');\r\n                }\r\n            } catch (error) {\r\n                console.error('Final order placement attempt failed:', error);\r\n            } finally {\r\n                setLoadingState(false);\r\n                showProgress(0, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Initial call to update cart total on load if cart summary exists\r\n    if (cartItemsSummary && cartTotalPriceElement) {\r\n        updateCartTotal();\r\n    }\r\n\r\n    // Event listener for quantity buttons in cart summary on checkout page\r\n    if (cartItemsSummary) {\r\n        cartItemsSummary.addEventListener('click', async function(event) {\r\n            const target = event.target;\r\n            if (target.classList.contains('quantity-btn')) {\r\n                const itemElement = target.closest('[data-item-id]');\r\n                if (!itemElement) return;\r\n\r\n                const itemId = itemElement.dataset.itemId;\r\n                const itemPrice = parseFloat(itemElement.dataset.itemPrice);\r\n                const quantitySpan = itemElement.querySelector('.item-quantity');\r\n                let currentQuantity = parseInt(quantitySpan.dataset.quantity);\r\n                const itemSubtotalElement = itemElement.querySelector('.item-subtotal');\r\n\r\n                let oldQuantity = currentQuantity;\r\n\r\n                if (target.classList.contains('plus-btn')) {\r\n                    currentQuantity++;\r\n                } else if (target.classList.contains('minus-btn')) {\r\n                    if (currentQuantity > 1) {\r\n                        currentQuantity--;\r\n                    } else {\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                quantitySpan.textContent = formatNumber(currentQuantity);\r\n                quantitySpan.dataset.quantity = currentQuantity;\r\n\r\n                const newSubtotal = itemPrice * currentQuantity;\r\n                itemSubtotalElement.textContent = `${formatNumber(newSubtotal)} تومان`;\r\n                itemSubtotalElement.dataset.subtotal = newSubtotal;\r\n\r\n                updateCartTotal();\r\n\r\n                try {\r\n                    const response = await fetch(`/cart/update/${itemId}`, {\r\n                        method: 'PUT',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                            'X-CSRF-TOKEN': getCsrfToken()\r\n                        },\r\n                        body: JSON.stringify({\r\n                            quantity: currentQuantity\r\n                        })\r\n                    });\r\n                    const result = await response.json();\r\n\r\n                    if (response.ok) {\r\n                        window.showMessage(result.message || 'تعداد محصول به‌روزرسانی شد.', 'success');\r\n                    } else {\r\n                        window.showMessage(result.message || 'خطا در به‌روزرسانی تعداد محصول.', 'error');\r\n                        quantitySpan.textContent = formatNumber(oldQuantity);\r\n                        quantitySpan.dataset.quantity = oldQuantity;\r\n                        itemSubtotalElement.textContent = `${formatNumber(itemPrice * oldQuantity)} تومان`;\r\n                        itemSubtotalElement.dataset.subtotal = itemPrice * oldQuantity;\r\n                        updateCartTotal();\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error updating cart item quantity:', error);\r\n                    window.showMessage('خطا در ارتباط با سرور. لطفاً اتصال اینترنت خود را بررسی کنید.', 'error');\r\n                    quantitySpan.textContent = formatNumber(oldQuantity);\r\n                    quantitySpan.dataset.quantity = oldQuantity;\r\n                    itemSubtotalElement.textContent = `${formatNumber(itemPrice * oldQuantity)} تومان`;\r\n                    itemSubtotalElement.dataset.subtotal = itemPrice * oldQuantity;\r\n                    updateCartTotal();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    console.log('Checkout module initialized successfully.');\r\n}\r\n"],"names":["validationRules","errorMessages","debounce","func","wait","timeout","args","later","showFieldError","inputElement","message","errorDivId","errorDiv","formErrorsLiveRegion","clearFieldError","validateField","fieldId","value","rule","showProgress","step","totalSteps","progressBar","percentage","validateFormFields","data","_a","el","isValid","firstInvalidElement","selectedAddressId","requiredAddressFields","field","addressRadios","shippingRadioGroup","paymentRadioGroup","termsAgreeCheckbox","handleServerValidationError","errors","errorMessage","handleClientError","result","status","handleRetryableError","attempt","maxRetries","placeOrderWithRetry","delay","i","controller","timeoutId","response","getCsrfToken","resolve","error","csrfMeta","saveDraft","placeOrderForm","formData","e","loadDraft","draft","key","addressFields","initializeAddressFields","populateAddressFields","address","clearAddressFields","formatNumber","num","updateCartTotal","cartItemsSummary","cartTotalPriceElement","total","itemElement","subtotal","setLoadingState","isLoading","placeOrderBtn","initCheckout","addressesData","defaultAddressData","target","addressRadiosContainer","event","selectedValue","selectedAddress","addr","defaultRadio","newAddressRadio","FORM_TIMEOUT","formTimeoutId","startFormTimeout","itemId","itemPrice","quantitySpan","currentQuantity","itemSubtotalElement","oldQuantity","newSubtotal"],"mappings":"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"}