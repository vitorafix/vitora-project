{"version":3,"file":"ui-components-uVfRm-cR.js","sources":["../../../resources/js/core/events.js","../../../resources/js/ui/navbar_new.js","../../../resources/js/ui/search.js","../../../resources/js/ui/hero.js"],"sourcesContent":["// resources/js/core/events.js\r\n// این فایل مسئول مدیریت رویدادهای DOM و کش کردن عناصر است.\r\n\r\nlet DOM = {}; // Object to store cached DOM elements\r\n\r\n/**\r\n * تابع debounce برای محدود کردن تعداد فراخوانی یک تابع.\r\n * @param {Function} func - تابعی که باید debounce شود.\r\n * @param {number} delay - تأخیر بر حسب میلی‌ثانیه.\r\n * @returns {Function} - نسخه debounce شده تابع.\r\n */\r\nexport function debounce(func, delay) {\r\n    let timeout;\r\n    return function(...args) {\r\n        const context = this;\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(() => func.apply(context, args), delay);\r\n    };\r\n}\r\n\r\n/**\r\n * کش کردن عناصر DOM مورد نیاز برای عملیات سبد خرید.\r\n * این تابع باید یک بار پس از بارگذاری کامل DOM فراخوانی شود.\r\n * @returns {boolean} true اگر عناصر اصلی سبد خرید (مانند کانتینر آیتم‌ها، پیام خالی بودن، خلاصه و قیمت کل) یافت شوند، در غیر این صورت false.\r\n */\r\nexport function initializeDOMCache() {\r\n    // Mini Cart Elements\r\n    DOM.miniCartToggle = document.getElementById('mini-cart-toggle');\r\n    DOM.miniCartDropdown = document.getElementById('mini-cart-dropdown');\r\n    DOM.miniCartItemsContainer = document.getElementById('mini-cart-items-container');\r\n    DOM.miniCartTotalQuantity = document.getElementById('mini-cart-total-quantity');\r\n    DOM.miniCartTotalPrice = document.getElementById('mini-cart-total-price');\r\n    DOM.miniCartEmptyMessage = document.getElementById('mini-cart-empty-message');\r\n    DOM.miniCartSummary = document.getElementById('mini-cart-summary');\r\n\r\n    // Main Cart Elements\r\n    DOM.cartItemsContainer = document.getElementById('cart-items-container');\r\n    DOM.cartEmptyMessage = document.getElementById('cart-empty-message');\r\n    DOM.cartSummary = document.getElementById('cart-summary');\r\n    DOM.cartTotalPrice = document.getElementById('cart-total-price'); // این عنصر در cart.blade.php اضافه شده است\r\n\r\n    // Add detailed logging for debugging\r\n    console.log('--- initializeDOMCache Debug ---');\r\n    console.log('DOM.miniCartToggle:', DOM.miniCartToggle);\r\n    console.log('DOM.miniCartDropdown:', DOM.miniCartDropdown);\r\n    console.log('DOM.miniCartItemsContainer (mini):', DOM.miniCartItemsContainer);\r\n    console.log('DOM.miniCartTotalQuantity:', DOM.miniCartTotalQuantity);\r\n    console.log('DOM.miniCartTotalPrice (mini):', DOM.miniCartTotalPrice);\r\n    console.log('DOM.miniCartEmptyMessage:', DOM.miniCartEmptyMessage);\r\n    console.log('DOM.miniCartSummary (mini):', DOM.miniCartSummary);\r\n\r\n    console.log('DOM.cartItemsContainer (main):', DOM.cartItemsContainer);\r\n    console.log('DOM.cartEmptyMessage (main):', DOM.cartEmptyMessage);\r\n    console.log('DOM.cartSummary (main):', DOM.cartSummary);\r\n    console.log('DOM.cartTotalPrice (main):', DOM.cartTotalPrice);\r\n    console.log('--- End initializeDOMCache Debug ---');\r\n\r\n    // بررسی وجود عناصر اصلی سبد خرید\r\n    const mainCartElementsFound = !!(DOM.cartItemsContainer && DOM.cartEmptyMessage && DOM.cartSummary && DOM.cartTotalPrice);\r\n    if (!mainCartElementsFound) {\r\n        console.error('CRITICAL: One or more main cart DOM elements were NOT found during initial cache. This indicates a potential HTML loading or script timing issue.');\r\n        // Optional: Try a delayed check to see if they appear later\r\n        setTimeout(() => {\r\n            const delayedCartItemsContainer = document.getElementById('cart-items-container');\r\n            const delayedCartEmptyMessage = document.getElementById('cart-empty-message');\r\n            const delayedCartSummary = document.getElementById('cart-summary');\r\n            const delayedCartTotalPrice = document.getElementById('cart-total-price');\r\n            console.log('--- Delayed initializeDOMCache Check (500ms) ---');\r\n            console.log('Delayed DOM.cartItemsContainer:', delayedCartItemsContainer);\r\n            console.log('Delayed DOM.cartEmptyMessage:', delayedCartEmptyMessage);\r\n            console.log('Delayed DOM.cartSummary:', delayedCartSummary);\r\n            console.log('Delayed DOM.cartTotalPrice:', delayedCartTotalPrice);\r\n            console.log('--- End Delayed Check ---');\r\n            if (delayedCartItemsContainer && delayedCartEmptyMessage && delayedCartSummary && delayedCartTotalPrice) {\r\n                console.warn('Main cart elements found after a delay. Consider adjusting script loading order or using a more robust DOM ready event.');\r\n            } else {\r\n                console.error('Main cart elements still NOT found after a 500ms delay. The HTML might not be rendering correctly or is being removed.');\r\n            }\r\n        }, 500); // Check again after 500ms\r\n    }\r\n\r\n    return mainCartElementsFound;\r\n}\r\n\r\n/**\r\n * بازگرداندن آبجکت کش شده DOM.\r\n * @returns {object} آبجکت DOM.\r\n */\r\nexport function getDOM() {\r\n    return DOM;\r\n}\r\n\r\n/**\r\n * تنظیم Event Listener برای دکمه‌های \"افزودن به سبد خرید\" در صفحات محصولات.\r\n * این تابع باید پس از بارگذاری محصولات فراخوانی شود.\r\n */\r\nexport function setupAddToCartButtons() {\r\n    // از event delegation استفاده می‌کنیم تا به دکمه‌های پویا هم اعمال شود\r\n    document.body.addEventListener('click', async (event) => {\r\n        const addToCartBtn = event.target.closest('.add-to-cart-btn');\r\n        if (addToCartBtn) {\r\n            event.preventDefault();\r\n            const productId = addToCartBtn.getAttribute('data-product-id');\r\n            const productTitle = addToCartBtn.getAttribute('data-product-title');\r\n            // const productPrice = addToCartBtn.getAttribute('data-product-price'); // اگر نیاز بود\r\n            const quantity = 1; // مقدار پیش‌فرض\r\n\r\n            if (typeof window.cartManager === 'undefined') {\r\n                console.error('CartManager is not defined. Cannot add item to cart.');\r\n                if (typeof window.showMessage === 'function') {\r\n                    window.showMessage('خطا: سیستم سبد خرید آماده نیست.', 'error');\r\n                }\r\n                return;\r\n            }\r\n\r\n            // نمایش وضعیت بارگذاری\r\n            if (typeof window.showMessage === 'function') {\r\n                window.showMessage(`در حال افزودن ${productTitle} به سبد خرید...`, 'info', 1500); // نمایش موقت\r\n            }\r\n\r\n            try {\r\n                await window.cartManager.addItem(productId, quantity);\r\n                // پیام موفقیت و به‌روزرسانی UI توسط CartManager انجام می‌شود\r\n            } catch (error) {\r\n                console.error('Error adding item to cart:', error);\r\n                // پیام خطا توسط CartManager یا تابع showMessage مدیریت می‌شود\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * تنظیم Event Listener برای دکمه باز و بسته کردن مینی سبد خرید.\r\n */\r\nexport function setupMiniCartToggle() {\r\n    if (DOM.miniCartToggle && DOM.miniCartDropdown) {\r\n        DOM.miniCartToggle.addEventListener('click', (event) => {\r\n            event.stopPropagation(); // جلوگیری از بسته شدن فوری در صورت کلیک روی دکمه\r\n            DOM.miniCartDropdown.classList.toggle('hidden');\r\n        });\r\n\r\n        // بستن مینی سبد خرید با کلیک در هر جای دیگر صفحه\r\n        document.addEventListener('click', (event) => {\r\n            if (!DOM.miniCartDropdown.contains(event.target) && !DOM.miniCartToggle.contains(event.target)) {\r\n                DOM.miniCartDropdown.classList.add('hidden');\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * تنظیم Event Listener برای دکمه‌های اقدام در مینی سبد خرید (مانند \"مشاهده سبد\" و \"تکمیل سفارش\").\r\n */\r\nexport function setupMiniCartActionButtons() {\r\n    const miniCartDropdown = DOM.miniCartDropdown;\r\n    if (!miniCartDropdown) {\r\n        console.warn('Mini cart dropdown not found for action buttons setup.');\r\n        return;\r\n    }\r\n\r\n    miniCartDropdown.addEventListener('click', (event) => {\r\n        if (event.target.matches('#view-cart-btn')) {\r\n            window.location.href = '/cart'; // مسیر صفحه سبد خرید\r\n        } else if (event.target.matches('#checkout-btn')) {\r\n            window.location.href = '/checkout'; // مسیر صفحه تکمیل سفارش\r\n        }\r\n    });\r\n}\r\n","// resources/js/ui/navbar_new.js\nconsole.log('navbar_new.js loaded and starting...');\n\n// Import necessary API functions\nimport { getJwtToken, logoutUser, fetchCartContents, removeCartItem, fetchUserData, clearJwtToken } from '../core/api.js';\n\n// === Mini Cart Logic Functions (REMOVED - NOW HANDLED BY REACT) ===\n// تابع renderMiniCart و منطق مربوط به آن به طور کامل حذف شده است،\n// زیرا رندر MiniCart و مدیریت آیتم‌ها اکنون توسط کامپوننت‌های React انجام می‌شود.\n\n// === User Status Logic Function ===\nexport async function updateNavbarUserStatus() {\n    const jwtToken = getJwtToken();\n    const desktopUserStatusDisplay = document.getElementById('desktop-user-status-display');\n    const userStatusGuestDiv = document.getElementById('user-status-guest');\n    const userStatusLoggedInDiv = document.getElementById('user-status-logged-in');\n    const loggedInUserFullNameDesktop = document.getElementById('logged-in-user-full-name');\n    const loginRegisterLink = document.getElementById('login-register-link');\n\n    const mobileUserStatusGuestDiv = document.getElementById('mobile-user-status-guest');\n    const mobileUserStatusLoggedInDiv = document.getElementById('mobile-user-status-logged-in');\n    const mobileLoggedInUserName = document.getElementById('mobile-logged-in-user-name');\n    const mobileLoggedInUserMobile = document.getElementById('mobile-logged-in-user-mobile');\n\n    console.log('DEBUG: updateNavbarUserStatus - Function called.');\n    console.log('DEBUG: updateNavbarUserStatus - JWT Token in localStorage:', jwtToken ? 'Found' : 'Not Found', jwtToken);\n\n    if (jwtToken) {\n        console.log('DEBUG: updateNavbarUserStatus - JWT Token found. Attempting to fetch user data.');\n        try {\n            const user = await fetchUserData();\n            const fullName = `${user.name || ''} ${user.lastname || ''}`.trim();\n            console.log('DEBUG: updateNavbarUserStatus - User data fetched:', user);\n\n            // Desktop Navbar Updates\n            if (desktopUserStatusDisplay) {\n                desktopUserStatusDisplay.textContent = `سلام، ${user.name || user.mobile_number}`;\n                console.log('DEBUG: desktopUserStatusDisplay updated to:', desktopUserStatusDisplay.textContent);\n            }\n            if (userStatusGuestDiv) {\n                userStatusGuestDiv.classList.add('hidden');\n                console.log('DEBUG: userStatusGuestDiv hidden. ClassList:', userStatusGuestDiv.classList.toString());\n            }\n            if (userStatusLoggedInDiv) {\n                userStatusLoggedInDiv.classList.remove('hidden');\n                console.log('DEBUG: userStatusLoggedInDiv shown. ClassList:', userStatusLoggedInDiv.classList.toString());\n                if (loggedInUserFullNameDesktop) {\n                    loggedInUserFullNameDesktop.textContent = fullName;\n                    console.log('DEBUG: loggedInUserFullNameDesktop updated to:', loggedInUserFullNameDesktop.textContent);\n                }\n            }\n            if (loginRegisterLink) {\n                loginRegisterLink.classList.add('hidden');\n                console.log('DEBUG: loginRegisterLink hidden. ClassList:', loginRegisterLink.classList.toString());\n            }\n\n            // Mobile Navbar Updates\n            if (mobileUserStatusGuestDiv) {\n                mobileUserStatusGuestDiv.classList.add('hidden');\n                console.log('DEBUG: mobileUserStatusGuestDiv hidden. ClassList:', mobileUserStatusGuestDiv.classList.toString());\n            }\n            if (mobileUserStatusLoggedInDiv) {\n                mobileUserStatusLoggedInDiv.classList.remove('hidden');\n                console.log('DEBUG: mobileUserStatusLoggedInDiv shown. ClassList:', mobileUserStatusLoggedInDiv.classList.toString());\n                if (mobileLoggedInUserName) {\n                    mobileLoggedInUserName.textContent = fullName;\n                    console.log('DEBUG: mobileLoggedInUserName updated to:', mobileLoggedInUserName.textContent);\n                }\n                if (mobileLoggedInUserMobile) {\n                    mobileLoggedInUserMobile.textContent = user.mobile_number;\n                    console.log('DEBUG: mobileLoggedInUserMobile updated to:', mobileLoggedInUserMobile.textContent);\n                }\n            }\n\n            document.querySelectorAll('.nav-link-dropdown-compact.text-red-500').forEach(button => {\n                button.classList.remove('hidden');\n                console.log('DEBUG: Logout button shown:', button);\n            });\n\n            console.log('Navbar user status updated: Logged in as', fullName || user.mobile_number);\n\n        } catch (error) {\n            console.error('Error fetching user data with JWT. Treating as guest:', error);\n            if (error.response && error.response.status === 401) {\n                clearJwtToken();\n                console.log('JWT token cleared due to 401 Unauthorized.');\n            }\n            // Revert to guest state\n            if (desktopUserStatusDisplay) {\n                desktopUserStatusDisplay.textContent = 'کاربر مهمان';\n                console.log('DEBUG: desktopUserStatusDisplay updated to:', desktopUserStatusDisplay.textContent);\n            }\n            if (userStatusLoggedInDiv) {\n                userStatusLoggedInDiv.classList.add('hidden');\n                console.log('DEBUG: userStatusLoggedInDiv hidden. ClassList:', userStatusLoggedInDiv.classList.toString());\n            }\n            if (userStatusGuestDiv) {\n                userStatusGuestDiv.classList.remove('hidden');\n                console.log('DEBUG: userStatusGuestDiv shown. ClassList:', userStatusGuestDiv.classList.toString());\n            }\n            if (loginRegisterLink) {\n                loginRegisterLink.classList.remove('hidden');\n                console.log('DEBUG: loginRegisterLink shown. ClassList:', loginRegisterLink.classList.toString());\n            }\n\n            if (mobileUserStatusLoggedInDiv) {\n                mobileUserStatusLoggedInDiv.classList.add('hidden');\n                console.log('DEBUG: mobileUserStatusLoggedInDiv hidden. ClassList:', mobileUserStatusLoggedInDiv.classList.toString());\n            }\n            if (mobileUserStatusGuestDiv) {\n                mobileUserStatusGuestDiv.classList.remove('hidden');\n                console.log('DEBUG: mobileUserStatusGuestDiv shown. ClassList:', mobileUserStatusGuestDiv.classList.toString());\n            }\n\n            document.querySelectorAll('.nav-link-dropdown-compact.text-red-500').forEach(button => {\n                button.classList.add('hidden');\n                console.log('DEBUG: Logout button hidden:', button);\n            });\n\n            console.log('Navbar user status updated: Guest user (due to error or no token).');\n        }\n    } else {\n        // No JWT token, ensure guest state is displayed\n        console.log('DEBUG: updateNavbarUserStatus - No JWT Token found. Displaying guest state.');\n        if (desktopUserStatusDisplay) {\n            desktopUserStatusDisplay.textContent = 'ورود / ثبت‌نام'; // Changed to match your navigation.blade.php for guest state\n            console.log('DEBUG: desktopUserStatusDisplay updated to:', desktopUserStatusDisplay.textContent);\n        }\n        if (userStatusLoggedInDiv) {\n            userStatusLoggedInDiv.classList.add('hidden');\n            console.log('DEBUG: userStatusLoggedInDiv hidden. ClassList:', userStatusLoggedInDiv.classList.toString());\n        }\n        if (userStatusGuestDiv) {\n            userStatusGuestDiv.classList.remove('hidden');\n            console.log('DEBUG: userStatusGuestDiv shown. ClassList:', userStatusGuestDiv.classList.toString());\n        }\n        if (loginRegisterLink) {\n            loginRegisterLink.classList.remove('hidden');\n            console.log('DEBUG: loginRegisterLink shown. ClassList:', loginRegisterLink.classList.toString());\n        }\n\n        if (mobileUserStatusLoggedInDiv) {\n            mobileUserStatusLoggedInDiv.classList.add('hidden');\n            console.log('DEBUG: mobileUserStatusLoggedInDiv hidden. ClassList:', mobileUserStatusLoggedInDiv.classList.toString());\n        }\n        if (mobileUserStatusGuestDiv) {\n            mobileUserStatusGuestDiv.classList.remove('hidden');\n            console.log('DEBUG: mobileUserStatusGuestDiv shown. ClassList:', mobileUserStatusGuestDiv.classList.toString());\n        }\n\n        document.querySelectorAll('.nav-link-dropdown-compact.text-red-500').forEach(button => {\n            button.classList.add('hidden');\n            console.log('DEBUG: Logout button hidden:', button);\n        });\n\n        console.log('Navbar user status updated: Guest user (no token).');\n    }\n}\n\n// === Main Initialization Function for Navbar and Mini-Cart ===\nexport function initializeNavbarAndCart() {\n    console.log('DEBUG: initializeNavbarAndCart function called.');\n    // renderMiniCart(); // این خط را غیرفعال کردیم، چون MiniCart اکنون توسط React مدیریت می‌شود\n    updateNavbarUserStatus();\n\n    // const miniCartContent = document.getElementById('mini-cart-items-container'); // این المنت دیگر توسط React مدیریت می‌شود\n    const logoutButtons = document.querySelectorAll('.nav-link-dropdown-compact.text-red-500');\n    // const addCartButtons = document.querySelectorAll('.add-to-cart-btn'); // دکمه‌های افزودن به سبد خرید اکنون توسط React مدیریت می‌شوند\n\n    // بلوک کد مربوط به حذف آیتم از MiniCart قدیمی حذف شده است.\n    // بلوک کد مربوط به دکمه‌های افزودن به سبد خرید قدیمی حذف شده است.\n\n    if (logoutButtons.length > 0) {\n        logoutButtons.forEach(button => {\n            button.addEventListener('click', async function(event) {\n                event.preventDefault();\n                console.log('DEBUG: Logout button clicked. Initiating logout process.');\n                try {\n                    await logoutUser();\n                    console.log('DEBUG: Logout initiated. Redirection expected from api.js.');\n                } catch (error) {\n                    console.error('Error during logout in navbar_new.js:', error);\n                    window.showMessage('خطا در خروج از حساب کاربری.', 'error');\n                }\n            });\n            console.log('DEBUG: Attached logout listener to:', button);\n        });\n    } else {\n        console.warn('No logout buttons found with selector \".nav-link-dropdown-compact.text-red-500\" during navbar initialization.');\n    }\n}\n","// resources/js/search/search.js\r\n\r\n// Assuming window.axios and window.showMessage are globally available from app.js\r\n// If debounce is moved to core/events.js or core/utils.js, you might need to import it.\r\n// For now, we'll assume it's either global or a local helper.\r\n// Since you have a debounce in events.js, it's better to import it from there.\r\nimport { debounce } from '../core/events.js'; // Assuming events.js is in core\r\n\r\n/**\r\n * Displays the search results in the results container.\r\n * نتایج جستجو را در کانتینر نتایج نمایش می‌دهد.\r\n * @param {Array<Object>} results - An array of product objects to display.\r\n */\r\nfunction displayResults(results) {\r\n    const resultsContainer = document.getElementById('search-results-container');\r\n    if (!resultsContainer) {\r\n        console.error('Search results container not found.');\r\n        return;\r\n    }\r\n\r\n    resultsContainer.innerHTML = ''; // Clear previous search results\r\n    resultsContainer.classList.remove('hidden'); // Show the container when results are available\r\n\r\n    if (results.length === 0) {\r\n        resultsContainer.innerHTML = `\r\n            <p class=\"text-gray-500 p-4 text-center text-sm\">محصولی یافت نشد.</p>\r\n        `;\r\n        return;\r\n    }\r\n\r\n    // Iterate over each product and create its HTML representation\r\n    results.forEach(product => {\r\n        const resultItem = document.createElement('a'); // Changed to <a> tag for clickable results\r\n        resultItem.href = `/products/${product.id}`; // Link to product page\r\n        // Add Tailwind CSS classes for styling each result item\r\n        resultItem.classList.add('flex', 'items-center', 'p-4', 'border-b', 'border-gray-200', 'last:border-b-0', 'hover:bg-gray-50', 'transition-colors', 'duration-200', 'rounded-lg', 'cursor-pointer');\r\n\r\n        // Determine the image URL. Use a placeholder if no image URL is provided.\r\n        const imageUrl = product.image || `https://placehold.co/100x100/A7F3D0/10B981?text=No+Image`;\r\n\r\n        // Set the inner HTML for the result item\r\n        resultItem.innerHTML = `\r\n            <img src=\"${imageUrl}\"\r\n                 onerror=\"this.onerror=null;this.src='https://placehold.co/100x100/E5E7EB/4B5563?text=No+Image';\"\r\n                 alt=\"${product.title}\"\r\n                 class=\"w-16 h-16 rounded-lg object-cover ml-4 shadow-sm\">\r\n            <div class=\"flex-1\">\r\n                <h3 class=\"text-lg font-semibold text-green-700\">${product.title}</h3>\r\n                <p class=\"text-gray-600 text-sm mt-1\">${product.description ? product.description.substring(0, 80) + '...' : ''}</p>\r\n                <p class=\"text-amber-600 font-bold mt-2\">${new Intl.NumberFormat('fa-IR').format(product.price)} تومان</p>\r\n            </div>\r\n        `;\r\n        // Append the created result item to the results container\r\n        resultsContainer.appendChild(resultItem);\r\n    });\r\n}\r\n\r\n/**\r\n * Initializes the live search functionality.\r\n * این تابع قابلیت جستجوی زنده را مقداردهی اولیه می‌کند.\r\n * This function is exported to be called by app.js after dynamic import.\r\n */\r\nexport function initSearch() {\r\n    console.log('Search module initializing...');\r\n    const searchInput = document.getElementById('live-search-input');\r\n    const resultsContainer = document.getElementById('search-results-container');\r\n\r\n    // Check if the elements exist to prevent errors on pages without them\r\n    if (!searchInput || !resultsContainer) {\r\n        console.warn(\"Search elements not found. Skipping live search initialization.\");\r\n        return;\r\n    }\r\n\r\n    let searchTimeout; // Moved local timeout variable inside initSearch\r\n\r\n    // Add an event listener to the search input field for 'input' events (when user types)\r\n    searchInput.addEventListener('input', debounce(async function() {\r\n        const query = this.value.trim();\r\n\r\n        // If the query is empty or less than 2 characters, hide the results container and display initial message\r\n        if (query.length < 2) {\r\n            resultsContainer.classList.add('hidden');\r\n            resultsContainer.innerHTML = '<p class=\"text-gray-500 text-center py-4 text-sm\" id=\"initial-message\">شروع به تایپ کنید تا نتایج را مشاهده کنید.</p>';\r\n            return;\r\n        }\r\n\r\n        // Display a loading message while waiting for search results and ensure container is visible\r\n        resultsContainer.innerHTML = '<p class=\"text-center py-4 text-green-600\"><i class=\"fas fa-spinner fa-spin ml-2\"></i>در حال جستجو...</p>';\r\n        resultsContainer.classList.remove('hidden');\r\n\r\n        try {\r\n            // استفاده از window.axios برای ارسال درخواست جستجو\r\n            const response = await window.axios.get(`/search?q=${encodeURIComponent(query)}`);\r\n\r\n            // Axios به طور خودکار خطاها را با throw می‌کند، نیازی به بررسی response.ok نیست.\r\n            // داده‌ها مستقیماً در response.data قرار دارند.\r\n            const data = response.data;\r\n\r\n            // Display the results\r\n            displayResults(data);\r\n        } catch (error) {\r\n            // Log and display an error message if the fetch fails\r\n            console.error('Search error:', error);\r\n            // Use window.showMessage for network/parsing errors\r\n            const errorMessage = error.response?.data?.message || 'خطا در ارتباط با سرور. لطفا اتصال اینترنت خود را بررسی کنید.';\r\n            if (typeof window.showMessage === 'function') { // Ensure showMessage exists\r\n                window.showMessage(errorMessage, 'error');\r\n            }\r\n            resultsContainer.innerHTML = `<p class=\"text-red-500 p-4 text-center\">خطا در ارتباط با سرور</p>`;\r\n            resultsContainer.classList.remove('hidden'); // Ensure container is visible for error message\r\n        }\r\n    }, 300)); // 300 milliseconds delay\r\n\r\n    // Add event listener to hide results when clicking outside the search input or results container\r\n    document.addEventListener('click', (event) => {\r\n        // Check if the clicked element is NOT the search input AND NOT inside the results container\r\n        if (event.target !== searchInput && !resultsContainer.contains(event.target)) {\r\n            resultsContainer.classList.add('hidden'); // Hide the results container\r\n        }\r\n    });\r\n\r\n    // Add event listener to show results when the search input is focused and has content\r\n    searchInput.addEventListener('focus', () => {\r\n        // Only show if there's content OR if it's currently showing initial message\r\n        if (searchInput.value.trim().length > 0) {\r\n            // If there's content, and results were previously loaded, show them\r\n            if (resultsContainer.children.length > 0 && resultsContainer.firstElementChild.id !== 'initial-message') {\r\n                resultsContainer.classList.remove('hidden');\r\n            } else { // If it was hidden and has content, re-trigger search (or show initial message if empty)\r\n                 if (searchInput.value.trim().length < 2) {\r\n                    resultsContainer.innerHTML = '<p class=\"text-gray-500 text-center py-4 text-sm\" id=\"initial-message\">شروع به تایپ کنید تا نتایج را مشاهده کنید.</p>';\r\n                 } else {\r\n                    // Re-trigger the input event to show search results if focus gained and query exists\r\n                    searchInput.dispatchEvent(new Event('input'));\r\n                 }\r\n                 resultsContainer.classList.remove('hidden'); // Ensure container is visible\r\n            }\r\n        } else {\r\n             resultsContainer.innerHTML = '<p class=\"text-gray-500 text-center py-4 text-sm\" id=\"initial-message\">شروع به تایپ کنید تا نتایج را مشاهده کنید.</p>';\r\n             resultsContainer.classList.remove('hidden'); // Show with initial message\r\n        }\r\n    });\r\n    console.log('Search module initialized successfully.');\r\n}\r\n\r\n// The document.addEventListener('DOMContentLoaded') block is removed from here.\r\n// app.js will dynamically import this module and call initSearch().\r\n","// resources/js/ui/hero.js\r\n\r\n/**\r\n * Initializes the hero carousel if slides are found.\r\n * کاروسل قهرمان را در صورت یافتن اسلایدها مقداردهی اولیه می‌کند.\r\n * This function is exported to be called by app.js after dynamic import.\r\n */\r\nexport function initHeroCarousel() {\r\n    const heroSlides = document.querySelectorAll('.hero-slide');\r\n\r\n    if (heroSlides.length === 0) {\r\n        console.warn('No hero slides found. Hero carousel will not be initialized.');\r\n        return; // از ادامه مقداردهی اولیه جلوگیری می‌کند\r\n    }\r\n\r\n    // اینجا کد مربوط به مقداردهی اولیه کاروسل (مثلاً با یک کتابخانه jQuery یا Vanilla JS) قرار می‌گیرد.\r\n    // مثال:\r\n    // $(.hero-carousel).slick({ /* options */ });\r\n    // یا\r\n    // new Carousel(document.querySelector('.hero-carousel'), { /* options */ });\r\n    console.log('Hero carousel initialized with', heroSlides.length, 'slides.');\r\n}\r\n\r\n// The document.addEventListener('DOMContentLoaded') block is removed from here.\r\n// app.js will dynamically import this module and call initHeroCarousel().\r\n"],"names":["debounce","func","delay","timeout","args","context","updateNavbarUserStatus","jwtToken","getJwtToken","desktopUserStatusDisplay","userStatusGuestDiv","userStatusLoggedInDiv","loggedInUserFullNameDesktop","loginRegisterLink","mobileUserStatusGuestDiv","mobileUserStatusLoggedInDiv","mobileLoggedInUserName","mobileLoggedInUserMobile","user","fetchUserData","fullName","button","error","clearJwtToken","initializeNavbarAndCart","logoutButtons","event","logoutUser","displayResults","results","resultsContainer","product","resultItem","imageUrl","initSearch","searchInput","query","data","errorMessage","_b","_a","initHeroCarousel","heroSlides"],"mappings":"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"}