{"version":3,"file":"app-w7vyctiH.js","sources":["../../../resources/js/hooks/useCart.ts","../../../resources/js/context/CartContext.tsx","../../../resources/js/components/cart/CartItem.tsx","../../../resources/js/components/cart/CartFooter.tsx","../../../resources/js/components/cart/MiniCart.tsx","../../../resources/js/app.tsx"],"sourcesContent":["// resources/js/hooks/useCart.ts\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport {\r\n    fetchCartContents,\r\n    addToCart,\r\n    updateCartItemQuantity,\r\n    removeCartItem,\r\n    clearCart,\r\n    applyCoupon, // اگر نیاز بود\r\n    removeCoupon // اگر نیاز بود\r\n} from '../core/api'; // مسیر صحیح به فایل api.js شما\r\n\r\n// تعریف تایپ برای آیتم سبد خرید (این تایپ باید با CartItem در types/cart.ts همخوانی داشته باشد)\r\ninterface CartItem {\r\n    id: string;\r\n    product: {\r\n        id: number;\r\n        name: string;\r\n        inStock: boolean;\r\n        slug: string | null;\r\n        image: string | null;\r\n        stockQuantity: number;\r\n    };\r\n    quantity: number;\r\n    unitPrice: number;\r\n    totalPrice: number;\r\n    formattedUnitPrice: string;\r\n    formattedTotalPrice: string;\r\n    addedAt: string;\r\n    updatedAt: string;\r\n}\r\n\r\n// تعریف تایپ برای وضعیت سبد خرید\r\ninterface CartState {\r\n    items: CartItem[];\r\n    total: number; // این `total` در state ما است\r\n    subtotal: number;\r\n    discount: number;\r\n    shipping: number;\r\n    tax: number;\r\n    loading: boolean;\r\n    error: string | null;\r\n}\r\n\r\n// هوک سفارشی useCart\r\nexport const useCart = () => {\r\n    const [cart, setCart] = useState<CartState>({\r\n        items: [],\r\n        total: 0,\r\n        subtotal: 0,\r\n        discount: 0,\r\n        shipping: 0,\r\n        tax: 0,\r\n        loading: true, // در ابتدا در حال بارگذاری است\r\n        error: null,\r\n    });\r\n\r\n    // تابع برای بارگذاری محتویات سبد خرید از API\r\n    const loadCart = useCallback(async () => {\r\n        setCart(prev => ({ ...prev, loading: true })); // همیشه قبل از فراخوانی API وضعیت loading را true کنید\r\n        try {\r\n            const response = await fetchCartContents();\r\n            // تغییر در اینجا: لاگ کردن کل response.data برای دیدن ساختار دقیق\r\n            console.log(\"API Response for fetchCartContents (full data):\", JSON.stringify(response.data, null, 2));\r\n\r\n            if (response.success && response.data) {\r\n                // اصلاح: استخراج مقادیر از response.data.summary\r\n                // 'totalPrice' را از summary استخراج می‌کنیم و به 'total' در state خود نگاشت می‌کنیم\r\n                const { items } = response.data;\r\n                const {\r\n                    totalPrice, // <--- تغییر در اینجا: از 'totalPrice' استفاده می‌کنیم\r\n                    subtotal,\r\n                    discount,\r\n                    shipping,\r\n                    tax\r\n                } = response.data.summary;\r\n\r\n                // لاگ برای بررسی مقادیر دریافتی قبل از تنظیم وضعیت\r\n                console.log(\"Received cart data from API (extracted values):\", { items, total: totalPrice, subtotal, discount, shipping, tax }); // <--- تغییر در اینجا: total را به totalPrice نگاشت می‌کنیم\r\n\r\n                setCart({\r\n                    items: items || [],\r\n                    total: totalPrice || 0, // <--- تغییر در اینجا: total را به totalPrice نگاشت می‌کنیم\r\n                    subtotal: subtotal || 0,\r\n                    discount: discount || 0,\r\n                    shipping: shipping || 0,\r\n                    tax: tax || 0,\r\n                    loading: false, // پس از دریافت داده‌ها، loading را false کنید\r\n                    error: null,\r\n                });\r\n            } else {\r\n                console.error(\"Failed to fetch cart contents:\", response.message || \"No data received.\");\r\n                setCart(prev => ({ ...prev, loading: false, error: response.message || \"Failed to fetch cart contents.\" }));\r\n            }\r\n        } catch (err: any) {\r\n            console.error(\"Error loading cart:\", err);\r\n            setCart(prev => ({ ...prev, loading: false, error: err.message || \"Error loading cart.\" }));\r\n        }\r\n    }, []); // بدون وابستگی، فقط یک بار در هنگام mount تعریف می‌شود\r\n\r\n    // Effect برای بارگذاری اولیه سبد خرید\r\n    useEffect(() => {\r\n        loadCart();\r\n    }, [loadCart]); // loadCart به عنوان وابستگی، اطمینان می‌دهد که فقط یک بار اجرا می‌شود\r\n\r\n    // تابع برای افزودن آیتم به سبد خرید\r\n    const addItem = useCallback(async (productId: string, quantity: number) => {\r\n        setCart(prev => ({ ...prev, loading: true }));\r\n        try {\r\n            const response = await addToCart(productId, quantity);\r\n            if (response.success) {\r\n                window.showMessage(response.message || 'محصول با موفقیت به سبد خرید اضافه شد.', 'success');\r\n                await loadCart(); // پس از افزودن، سبد خرید را دوباره بارگذاری کنید\r\n            } else {\r\n                window.showMessage(response.message || 'خطا در افزودن محصول.', 'error');\r\n                setCart(prev => ({ ...prev, loading: false, error: response.message || \"Failed to add item.\" }));\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Failed to add item:\", err);\r\n            window.showMessage('خطا در افزودن محصول به سبد خرید.', 'error');\r\n            setCart(prev => ({ ...prev, loading: false, error: \"Failed to add item.\" }));\r\n        }\r\n    }, [loadCart]);\r\n\r\n    // تابع برای به‌روزرسانی تعداد آیتم در سبد خرید\r\n    const updateQuantity = useCallback(async (itemId: string, quantity: number) => {\r\n        setCart(prev => ({ ...prev, loading: true }));\r\n        try {\r\n            const response = await updateCartItemQuantity(itemId, quantity);\r\n            if (response.success) {\r\n                window.showMessage(response.message || 'تعداد محصول به‌روزرسانی شد.', 'success');\r\n                await loadCart(); // پس از به‌روزرسانی، سبد خرید را دوباره بارگذاری کنید\r\n            } else {\r\n                window.showMessage(response.message || 'خطا در به‌روزرسانی تعداد محصول.', 'error');\r\n                setCart(prev => ({ ...prev, loading: false, error: response.message || \"Failed to update quantity.\" }));\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Failed to update quantity:\", err);\r\n            window.showMessage('خطا در به‌روزرسانی تعداد محصول.', 'error');\r\n            setCart(prev => ({ ...prev, loading: false, error: \"Failed to update quantity.\" }));\r\n        }\r\n    }, [loadCart]);\r\n\r\n    // تابع برای حذف آیتم از سبد خرید\r\n    const removeItem = useCallback(async (itemId: string) => {\r\n        setCart(prev => ({ ...prev, loading: true }));\r\n        try {\r\n            const response = await removeCartItem(itemId);\r\n            if (response.success) {\r\n                window.showMessage(response.message || 'محصول از سبد خرید حذف شد.', 'success');\r\n                await loadCart(); // پس از حذف، سبد خرید را دوباره بارگذاری کنید\r\n            } else {\r\n                window.showMessage(response.message || 'خطا در حذف محصول.', 'error');\r\n                setCart(prev => ({ ...prev, loading: false, error: response.message || \"Failed to remove item.\" }));\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Failed to remove item:\", err);\r\n            window.showMessage('خطا در حذف محصول از سبد خرید.', 'error');\r\n            setCart(prev => ({ ...prev, loading: false, error: \"Failed to remove item.\" }));\r\n        }\r\n    }, [loadCart]);\r\n\r\n    const clearAllItems = useCallback(async () => {\r\n        setCart(prev => ({ ...prev, loading: true }));\r\n        try {\r\n            await clearCart();\r\n            window.showMessage('سبد خرید شما خالی شد.', 'success');\r\n            await loadCart(); // پس از پاک کردن، سبد خرید را دوباره بارگذاری کنید\r\n        } catch (err) {\r\n            console.error(\"Failed to clear cart:\", err);\r\n            window.showMessage('خطا در پاک کردن سبد خرید.', 'error');\r\n            setCart(prev => ({ ...prev, loading: false, error: \"Failed to clear cart.\" }));\r\n        }\r\n    }, [loadCart]);\r\n\r\n    // توابع مربوط به کوپن را در صورت نیاز اضافه کنید\r\n    // const applyCouponCode = useCallback(async (code: string) => { ... }, [loadCart]);\r\n    // const removeAppliedCoupon = useCallback(async () => { ... }, [loadCart]);\r\n\r\n\r\n    return {\r\n        cartItems: cart.items,\r\n        cartTotal: cart.total,\r\n        cartSubtotal: cart.subtotal,\r\n        cartDiscount: cart.discount,\r\n        cartShipping: cart.shipping,\r\n        cartTax: cart.tax,\r\n        cartLoading: cart.loading,\r\n        cartError: cart.error,\r\n        addItem,\r\n        updateQuantity,\r\n        removeFromCart: removeItem, // نام تابع را برای وضوح بیشتر\r\n        clearAllItems,\r\n        loadCart // این تابع را نیز برای رفرش دستی MiniCart در AppDebugger اکسپوز می‌کنیم\r\n    };\r\n};\r\n","// resources/js/context/CartContext.tsx\nimport React, { createContext, useContext } from 'react';\nimport { useCart } from '../hooks/useCart'; // مسیر صحیح به هوک useCart شما\nimport { CartItem } from '../types/cart'; // وارد کردن تایپ CartItem از فایل مشترک\n\n// تعریف تایپ برای وضعیت و توابع سبد خرید که از طریق Context ارائه می‌شوند\n// ReturnType<typeof useCart> به طور خودکار تایپ‌های بازگشتی هوک useCart را استخراج می‌کند\ninterface CartContextType {\n    cartItems: CartItem[];\n    cartTotal: number;\n    cartSubtotal: number;\n    cartDiscount: number;\n    cartShipping: number;\n    cartTax: number;\n    cartLoading: boolean;\n    cartError: string | null;\n    addItem: (productId: string, quantity: number) => Promise<void>;\n    updateQuantity: (itemId: string, quantity: number) => Promise<void>;\n    removeFromCart: (itemId: string) => Promise<void>;\n    clearAllItems: () => Promise<void>; // نام تابع را به clearAllItems تغییر دادیم\n    loadCart: () => Promise<void>;\n    // توابع مربوط به کوپن را در صورت نیاز اینجا اضافه کنید\n    // applyCouponCode: (code: string) => Promise<void>;\n    // removeAppliedCoupon: () => Promise<void>;\n}\n\n// ایجاد Context\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\n// هوک سفارشی برای استفاده از CartContext\nexport const useCartContext = () => {\n    const context = useContext(CartContext);\n    if (!context) {\n        throw new Error('useCartContext must be used within a CartProvider');\n    }\n    return context;\n};\n\n// کامپوننت CartProvider\nexport const CartProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n    // هوک useCart فقط یک بار در اینجا فراخوانی می‌شود\n    const cart = useCart();\n\n    return (\n        <CartContext.Provider value={cart}>\n            {children}\n        </CartContext.Provider>\n    );\n};\n","// resources/js/components/cart/CartItem.tsx\r\nimport React from 'react';\r\nimport { CartItem as CartItemType } from '../../types/cart'; // وارد کردن تایپ CartItem\r\nimport { useCartContext } from '../../context/CartContext'; // برای دسترسی به توابع\r\n\r\ninterface CartItemProps {\r\n    item: CartItemType;\r\n    onRemove: (itemId: string) => void;\r\n    onUpdateQuantity: (itemId: string, quantity: number) => void;\r\n}\r\n\r\nconst CartItem: React.FC<CartItemProps> = ({ item, onRemove, onUpdateQuantity }) => {\r\n    // برای دیباگ کردن ساختار پراپ item\r\n    console.log(\"CartItem received item (full content):\", JSON.stringify(item, null, 2));\r\n\r\n    const { cartLoading } = useCartContext();\r\n\r\n    // استفاده از item.product?.name برای نام محصول\r\n    const productName = item.product?.name || 'نامشخص';\r\n    // استفاده از item.product?.image برای تصویر محصول\r\n    const productImage = item.product?.image;\r\n    // استفاده مستقیم از formattedUnitPrice که توسط بک‌اند فرمت شده است\r\n    const formattedPrice = item.formattedUnitPrice || 'قیمت نامعتبر';\r\n\r\n    // اضافه کردن لاگ‌های جدید برای بررسی مقادیر نهایی\r\n    console.log(`CartItem - Product Name: \"${productName}\"`);\r\n    console.log(`CartItem - Formatted Price: \"${formattedPrice}\"`);\r\n    console.log(`CartItem - Product Image: \"${productImage}\"`);\r\n\r\n\r\n    const handleQuantityChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        const newQuantity = parseInt(e.target.value, 10);\r\n        if (!isNaN(newQuantity) && newQuantity > 0) {\r\n            onUpdateQuantity(item.id, newQuantity);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex items-center p-3 border-b border-gray-100 last:border-b-0\">\r\n            {/* تصویر محصول */}\r\n            <div className=\"flex-shrink-0 w-16 h-16 rounded-md overflow-hidden mr-3\">\r\n                <img\r\n                    src={productImage || `https://placehold.co/64x64/E2E8F0/64748B?text=${encodeURIComponent(productName)}`}\r\n                    alt={productName}\r\n                    className=\"w-full h-full object-cover\"\r\n                    onError={(e) => {\r\n                        e.currentTarget.src = `https://placehold.co/64x64/E2E8F0/64748B?text=${encodeURIComponent(productName)}`;\r\n                    }}\r\n                />\r\n            </div>\r\n\r\n            {/* جزئیات محصول */}\r\n            <div className=\"flex-grow\">\r\n                <h4 className=\"text-sm font-medium text-gray-900 line-clamp-2\">{productName}</h4>\r\n                {/* استفاده مستقیم از formattedPrice */}\r\n                <p className=\"text-xs text-gray-500 mt-1\">\r\n                    {formattedPrice}\r\n                </p>\r\n            </div>\r\n\r\n            {/* کنترل تعداد و حذف */}\r\n            <div className=\"flex items-center ml-3\">\r\n                <select\r\n                    value={item.quantity}\r\n                    onChange={handleQuantityChange}\r\n                    disabled={cartLoading}\r\n                    className=\"form-select text-sm rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 w-16 text-center\"\r\n                    aria-label={`تعداد ${productName}`}\r\n                >\r\n                    {[...Array(10).keys()].map(i => ( // فرض می‌کنیم حداکثر 10 عدد از هر کالا\r\n                        <option key={i + 1} value={i + 1}>{i + 1}</option>\r\n                    ))}\r\n                </select>\r\n                <button\r\n                    onClick={() => onRemove(item.id)}\r\n                    disabled={cartLoading}\r\n                    className=\"ml-2 text-red-500 hover:text-red-700 transition-colors p-1 rounded-full hover:bg-red-50\"\r\n                    aria-label={`حذف ${productName}`}\r\n                >\r\n                    <i className=\"fas fa-trash-alt text-sm\"></i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CartItem;\r\n","// resources/js/components/cart/CartFooter.tsx\r\nimport React from 'react';\r\n\r\ninterface CartFooterProps {\r\n    total: number;\r\n    loading?: boolean; // اضافه شدن پراپ loading\r\n}\r\n\r\nconst CartFooter: React.FC<CartFooterProps> = ({ total, loading = false }) => {\r\n    // اضافه کردن این console.log برای بررسی مقدار total دریافتی\r\n    console.log(\"CartFooter received total:\", total);\r\n\r\n    // بررسی اینکه آیا سبد خرید خالی است یا در حال بارگذاری\r\n    const isDisabled = total === 0 || loading;\r\n\r\n    // تابع برای ردیابی آنالیتیکس در زمان کلیک روی دکمه تکمیل سفارش\r\n    const handleCheckoutClick = (e: React.MouseEvent<HTMLAnchorElement>) => {\r\n        if (isDisabled) {\r\n            e.preventDefault(); // جلوگیری از ناوبری اگر دکمه غیرفعال است\r\n            return;\r\n        }\r\n        // اینجا می‌توانید کدهای ردیابی آنالیتیکس خود را اضافه کنید\r\n        // مثال: window.trackEvent('checkout_initiated', { value: total });\r\n        console.log('Checkout initiated with total:', total);\r\n    };\r\n\r\n    return (\r\n        <div className=\"p-4 border-t border-gray-200\">\r\n            <div className=\"flex justify-between items-center mb-4\">\r\n                <span className=\"text-md font-semibold text-gray-700\">مجموع کل:</span>\r\n                <span className=\"text-lg font-bold text-green-700\">{total.toLocaleString()} تومان</span>\r\n            </div>\r\n            <div className=\"flex flex-col space-y-3\">\r\n                {/* دکمه مشاهده سبد خرید */}\r\n                <a\r\n                    href=\"/cart\"\r\n                    className={`w-full text-center ${isDisabled ? 'btn-disabled pointer-events-none' : 'btn-secondary'}`}\r\n                    aria-disabled={isDisabled} // برای دسترسی‌پذیری\r\n                    tabIndex={isDisabled ? -1 : 0} // برای دسترسی‌پذیری\r\n                >\r\n                    مشاهده سبد خرید\r\n                </a>\r\n                {/* دکمه ادامه جهت تکمیل سفارش */}\r\n                <a\r\n                    href=\"/checkout\"\r\n                    onClick={handleCheckoutClick}\r\n                    className={`w-full text-center ${isDisabled ? 'btn-disabled pointer-events-none' : 'btn-primary'}`}\r\n                    aria-disabled={isDisabled} // برای دسترسی‌پذیری\r\n                    tabIndex={isDisabled ? -1 : 0} // برای دسترسی‌پذیری\r\n                >\r\n                    ادامه جهت تکمیل سفارش\r\n                </a>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CartFooter;\r\n","// resources/js/components/cart/MiniCart.tsx\nimport React from 'react';\nimport CartItem from './CartItem';\nimport CartFooter from './CartFooter';\nimport { useCartContext } from '../../context/CartContext';\n\ninterface MiniCartProps {\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nconst MiniCart: React.FC<MiniCartProps> = ({ isOpen, onClose }) => {\n    const { cartItems, cartTotal, removeFromCart, updateQuantity, cartLoading } = useCartContext();\n\n    // If the cart is not open, nothing is displayed\n    if (!isOpen) return null;\n\n    return (\n        <div\n            className=\"absolute top-full right-1/2 mt-1 w-72 md:w-80 bg-white rounded-lg shadow-xl border border-gray-200 z-[9999] overflow-hidden\"\n            style={{ transform: 'translate(82.4%, -1.2vh)' }} // Style to move the box up by 2% (from 0.8vh to -1.2vh) and position it slightly more to the left\n        >\n            <div className=\"p-4 border-b border-gray-200 flex justify-between items-center\">\n                <h3 className=\"text-lg font-semibold text-gray-800\">سبد خرید</h3>\n                <button\n                    onClick={onClose}\n                    className=\"text-gray-500 hover:text-gray-700 transition-colors\"\n                    aria-label=\"بستن سبد خرید\"\n                >\n                    <i className=\"fas fa-times\"></i>\n                </button>\n            </div>\n            {cartLoading ? (\n                <p className=\"text-center text-gray-500 py-8\">در حال بارگذاری سبد خرید...</p>\n            ) : (\n                <div className=\"max-h-60 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-100\">\n                    {cartItems.length === 0 ? (\n                        <p className=\"text-center text-gray-500 py-8\">سبد خرید شما خالی است.</p>\n                    ) : (\n                        cartItems.map(item => (\n                            <CartItem\n                                key={item.id}\n                                item={item}\n                                onRemove={removeFromCart}\n                                onUpdateQuantity={updateQuantity}\n                            />\n                        ))\n                    )}\n                </div>\n            )}\n            {/* Cart footer is only displayed when there is an item in the cart */}\n            {cartItems.length > 0 && (\n                <CartFooter total={cartTotal} loading={cartLoading} />\n            )}\n        </div>\n    );\n};\n\nexport default MiniCart;\n","// resources/js/app.tsx\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport ReactDOM from 'react-dom'; // For using createPortal\nimport MiniCart from './components/cart/MiniCart';\nimport { CartProvider, useCartContext } from './context/CartContext';\n\n// NEW: Import the analytics module\nimport './core/analytics.js'; // Import analytics.js from the core folder\n\n// Define the \"Add to Cart\" component that uses Context\ninterface AddToCartButtonProps {\n    productId: string;\n    productName: string;\n    price: number;\n}\n\nexport const AddToCartButton: React.FC<AddToCartButtonProps> = ({ productId, productName, price }) => {\n    const { addItem } = useCartContext();\n    // اضافه کردن وضعیت loading محلی برای هر دکمه\n    const [isLoading, setIsLoading] = useState(false); \n\n    const handleAddToCart = async () => {\n        setIsLoading(true); // شروع بارگذاری برای این دکمه خاص\n        try {\n            await addItem(productId, 1);\n        } catch (error) {\n            console.error(\"Failed to add item via button:\", error);\n        } finally {\n            setIsLoading(false); // پایان بارگذاری برای این دکمه خاص\n        }\n    };\n\n    return (\n        <button\n            onClick={handleAddToCart}\n            disabled={isLoading} // استفاده از isLoading محلی\n            className={`btn-primary ${isLoading ? 'btn-disabled' : ''} flex items-center`}\n        >\n            {isLoading ? (\n                'در حال افزودن...' // Adding...\n            ) : (\n                <>\n                    <i className=\"fas fa-cart-plus ml-2\"></i>\n                    افزودن به سبد\n                </>\n            )}\n        </button>\n    );\n};\n\n// Main React application component\nconst App: React.FC = () => {\n    const [isMiniCartOpen, setIsMiniCartOpen] = useState(false);\n    const { loadCart } = useCartContext();\n\n    // Ref for the mini-cart toggle button and the mini-cart dropdown container\n    const miniCartToggleRef = useRef<HTMLElement | null>(null);\n    const miniCartDropdownRef = useRef<HTMLElement | null>(null); // This will refer to #mini-cart-root\n\n    // Expose loadCart globally for debugging or use by non-React code\n    useEffect(() => {\n        if (typeof window !== 'undefined') {\n            (window as any).loadCart = loadCart;\n            console.log('window.loadCart exposed for debugging.');\n        }\n    }, [loadCart]);\n\n    const toggleMiniCart = useCallback(() => {\n        setIsMiniCartOpen(prev => !prev);\n    }, []);\n\n    const closeMiniCart = useCallback(() => {\n        setIsMiniCartOpen(false);\n    }, []);\n\n    // Handle clicks outside the mini-cart area\n    const handleClickOutside = useCallback((event: MouseEvent) => {\n        // اگر کلیک روی دکمه باز و بسته کردن سبد خرید نبود و روی خود مینی سبد هم نبود، آن را ببند\n        if (\n            miniCartToggleRef.current && !miniCartToggleRef.current.contains(event.target as Node) &&\n            miniCartDropdownRef.current && !miniCartDropdownRef.current.contains(event.target as Node)\n        ) {\n            closeMiniCart();\n        }\n    }, [closeMiniCart]);\n\n    // State to hold AddToCartButton portals\n    const [addToCartPortals, setAddToCartPortals] = useState<JSX.Element[]>([]);\n\n    useEffect(() => {\n        const productRoots = document.querySelectorAll('[id^=\"add-to-cart-root-\"]');\n        const portals: JSX.Element[] = [];\n\n        productRoots.forEach(rootElement => {\n            const productId = rootElement.id.replace('add-to-cart-root-', '');\n            const productName = rootElement.dataset.productName;\n            const price = parseFloat(rootElement.dataset.productPrice || '0');\n\n            if (productId && productName && !isNaN(price) && price > 0) {\n                portals.push(\n                    ReactDOM.createPortal(\n                        <React.StrictMode>\n                            <AddToCartButton\n                                productId={productId}\n                                productName={productName}\n                                price={price}\n                            />\n                        </React.StrictMode>,\n                        rootElement\n                    )\n                );\n                console.log(`AddToCartButton portal created for product ${productId}`);\n            } else {\n                let warningMessage = `Could not create AddToCartButton portal for root: ${rootElement.id}. Missing/invalid data: `;\n                if (!productId) warningMessage += 'productId; ';\n                if (!productName) warningMessage += 'productName; ';\n                if (isNaN(price) || price <= 0) warningMessage += `price (${rootElement.dataset.productPrice}); `;\n                console.warn(warningMessage);\n            }\n        });\n        setAddToCartPortals(portals);\n    }, []);\n\n    // Effect to handle MiniCart button and dropdown events\n    useEffect(() => {\n        const miniCartToggleBtn = document.getElementById('mini-cart-toggle');\n        const miniCartRoot = document.getElementById('mini-cart-root');\n\n        // Assign refs\n        miniCartToggleRef.current = miniCartToggleBtn;\n        miniCartDropdownRef.current = miniCartRoot;\n\n        // متغیر برای نگهداری تایمر mouseleave\n        let mouseLeaveTimeout: NodeJS.Timeout | null = null;\n\n        const handleMouseEnterToggle = () => {\n            // اگر تایمر فعال بود، آن را پاک کن تا از بسته شدن ناخواسته جلوگیری شود\n            if (mouseLeaveTimeout) {\n                clearTimeout(mouseLeaveTimeout);\n                mouseLeaveTimeout = null;\n            }\n            setIsMiniCartOpen(true);\n        };\n\n        // حتما event را دریافت کن\n        const handleMouseLeaveToggleOrDropdown = (event: MouseEvent) => {\n            // یک تاخیر کوتاه برای بسته شدن ایجاد می‌کنیم تا فرصت حرکت ماوس را بدهیم\n            mouseLeaveTimeout = setTimeout(() => {\n                // فقط اگر ماوس واقعا از هر دو عنصر خارج شده باشد، ببند\n                if (\n                    miniCartToggleRef.current && !miniCartToggleRef.current.contains(document.elementFromPoint(event.clientX, event.clientY)!) &&\n                    miniCartDropdownRef.current && !miniCartDropdownRef.current.contains(document.elementFromPoint(event.clientX, event.clientY)!)\n                ) {\n                    closeMiniCart();\n                }\n            }, 100); // 100 میلی‌ثانیه تاخیر\n        };\n\n        if (miniCartToggleBtn) {\n            miniCartToggleBtn.addEventListener('click', toggleMiniCart);\n            miniCartToggleBtn.addEventListener('mouseenter', handleMouseEnterToggle);\n            miniCartToggleBtn.addEventListener('mouseleave', handleMouseLeaveToggleOrDropdown); // اضافه کردن mouseleave به دکمه\n        }\n\n        if (miniCartRoot) {\n            miniCartRoot.addEventListener('mouseenter', handleMouseEnterToggle); // وقتی ماوس روی مینی‌سبد می‌رود، آن را باز نگه دار\n            miniCartRoot.addEventListener('mouseleave', handleMouseLeaveToggleOrDropdown); // وقتی ماوس از مینی‌سبد خارج می‌شود، با تاخیر ببند\n        }\n\n        // Add click outside listener to the document\n        document.addEventListener('mousedown', handleClickOutside);\n\n        return () => {\n            // Cleanup event listeners when component unmounts\n            if (miniCartToggleBtn) {\n                miniCartToggleBtn.removeEventListener('click', toggleMiniCart);\n                miniCartToggleBtn.removeEventListener('mouseenter', handleMouseEnterToggle);\n                miniCartToggleBtn.removeEventListener('mouseleave', handleMouseLeaveToggleOrDropdown);\n            }\n            if (miniCartRoot) {\n                miniCartRoot.removeEventListener('mouseenter', handleMouseEnterToggle);\n                miniCartRoot.removeEventListener('mouseleave', handleMouseLeaveToggleOrDropdown);\n            }\n            document.removeEventListener('mousedown', handleClickOutside);\n            if (mouseLeaveTimeout) { // پاک کردن تایمر در هنگام unmount\n                clearTimeout(mouseLeaveTimeout);\n            }\n        };\n    }, [toggleMiniCart, closeMiniCart, handleClickOutside]); // Dependencies\n\n    return (\n        <>\n            {/* MiniCart will now be rendered via a Portal into #mini-cart-root in the navbar. */}\n            {typeof document !== 'undefined' && document.getElementById('mini-cart-root') &&\n                ReactDOM.createPortal(\n                    <MiniCart isOpen={isMiniCartOpen} onClose={closeMiniCart} />,\n                    document.getElementById('mini-cart-root') as HTMLElement\n                )\n            }\n\n            {/* Render all AddToCartButton portals */}\n            {addToCartPortals}\n        </>\n    );\n};\n\n// Function to initialize the main React application\nconst initializeMainReactApp = () => {\n    // A single root element for the entire React application\n    const reactRootElement = document.getElementById('react-root');\n\n    if (reactRootElement) {\n        const root = createRoot(reactRootElement);\n        root.render(\n            <React.StrictMode>\n                <CartProvider>\n                    <App />\n                </CartProvider>\n            </React.StrictMode>\n        );\n        console.log('Main React application mounted successfully with CartProvider.');\n    } else {\n        console.warn('Could not find #react-root element to mount the main React application. Ensure it exists in app.blade.php.');\n    }\n};\n\n// Ensure the main React application is initialized only after the DOM is fully loaded\nwindow.addEventListener('DOMContentLoaded', initializeMainReactApp);\n\nexport default App;\n"],"names":["useCart","cart","setCart","useState","loadCart","useCallback","prev","response","fetchCartContents","items","totalPrice","subtotal","discount","shipping","tax","err","useEffect","addItem","productId","quantity","addToCart","updateQuantity","itemId","updateCartItemQuantity","removeItem","removeCartItem","clearAllItems","clearCart","CartContext","createContext","useCartContext","context","useContext","CartProvider","children","CartItem","item","onRemove","onUpdateQuantity","cartLoading","productName","_a","productImage","_b","formattedPrice","handleQuantityChange","e","newQuantity","jsxs","jsx","i","CartFooter","total","loading","isDisabled","handleCheckoutClick","MiniCart","isOpen","onClose","cartItems","cartTotal","removeFromCart","AddToCartButton","price","isLoading","setIsLoading","handleAddToCart","error","Fragment","App","isMiniCartOpen","setIsMiniCartOpen","miniCartToggleRef","useRef","miniCartDropdownRef","toggleMiniCart","closeMiniCart","handleClickOutside","event","addToCartPortals","setAddToCartPortals","productRoots","portals","rootElement","ReactDOM","React","warningMessage","miniCartToggleBtn","miniCartRoot","mouseLeaveTimeout","handleMouseEnterToggle","handleMouseLeaveToggleOrDropdown","initializeMainReactApp","reactRootElement","createRoot"],"mappings":"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"}