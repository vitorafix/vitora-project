server {
    listen 80;
    listen [::]:80;
    server_name localhost myshop.test; # Consider adding myshop.test if you use it
    root /var/www/public;

    index index.php index.html index.htm;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    client_max_body_size 10M;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        try_files $uri =404; # Ensure this is correct for your setup, sometimes just 'fastcgi_pass' is enough
        fastcgi_pass app:9000; # Assuming 'app' is your PHP-FPM service name
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }

    location ~ /\.(?!well-known).* {
        deny all;
        return 404;
    }

    # --- üîê Security Headers ---
    add_header X-Frame-Options "SAMEORIGIN" always; # Changed from DENY to SAMEORIGIN based on common use cases
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always; # Added for good measure

    # --- ‚úÖ Corrected Content-Security-Policy for Development ---
    # This CSP is designed to work in a development environment with Vite/React,
    # allowing inline scripts/styles and connections to localhost:3000.
    # IMPORTANT: Ensure this entire line is a single, continuous line in your actual Nginx configuration file.
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' http://localhost:3000 https://cdnjs.cloudflare.com; style-src 'self' 'unsafe-inline' http://localhost:3000 https://fonts.googleapis.com https://cdnjs.cloudflare.com; img-src 'self' data: https://* http://*; font-src 'self' https://fonts.gstatic.com https://cdnjs.cloudflare.com; connect-src 'self' http://localhost:3000 ws://localhost:3000; object-src 'none'; frame-ancestors 'self';" always;

    # --- ‚ö†Ô∏è HTTPS (for future Production) ---
    # For complete security, you should enable SSL in production:
    #
    # listen 443 ssl;
    # ssl_certificate /etc/ssl/certs/your-cert.pem;
    # ssl_certificate_key /etc/ssl/private/your-key.pem;
    #
    # if ($scheme = http) {
    #     return 301 https://$host$request_uri;
    # }

    # --- ‚úÖ Stricter CSP Example for Production (Uncomment and configure when ready) ---
    # This is a more restrictive example for a production environment.
    # You will need to carefully list all required external sources and remove 'unsafe-inline'/'unsafe-eval'.
    #
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self' https://cdn.jsdelivr.net; style-src 'self' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self'; object-src 'none'; frame-ancestors 'self';" always;

    # Allow access to static files (optional, but good practice)
    location ~* \.(css|js|jpg|jpeg|png|gif|ico|woff|woff2|ttf|svg|eot)$ {
        try_files $uri =404;
        expires 1M;
        access_log off;
        add_header Cache-Control "public";
    }
}
